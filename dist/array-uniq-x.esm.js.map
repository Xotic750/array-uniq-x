{"version":3,"sources":["../src/array-uniq-x.js"],"names":[],"mappings":"AAAA,OAAO,MAAP,MAAmB,gBAAnB;AACA,OAAO,OAAP,MAAoB,YAApB;AACA,OAAO,SAAP,MAAsB,cAAtB;AACA,OAAO,SAAP,MAAsB,oBAAtB;AAEA,IAAM,IAAI,GAAG,SAAS,CAAC,GAAG,IAAJ,CAAtB;AAEA;;;;;;;;;;AASA,IAAM,IAAI,GAAG,SAAS,IAAT,CAAc,KAAd,EAAqB,YAArB,EAAmC;AAC9C,MAAM,WAAW,GAAG,SAAS,CAAC,YAAD,CAA7B;AACA,MAAM,IAAI,GAAG,WAAW,GAAG,WAAH,GAAiB,eAAzC;AAEA,SAAO,MAAM,CACX,KADW,EAEX,SAAS,QAAT,CAAkB,WAAlB,EAA+B,YAA/B,EAA6C;AAC3C,QAAI,OAAO,CAAC,WAAD,EAAc,YAAd,EAA4B,IAA5B,CAAP,KAA6C,CAAC,CAAlD,EAAqD;AACnD,MAAA,IAAI,CAAC,WAAD,EAAc,WAAW,KAAK,KAAhB,IAAyB,YAAY,KAAK,CAA1C,GAA8C,CAA9C,GAAkD,YAAhE,CAAJ;AACD;;AAED,WAAO,WAAP;AACD,GARU,EASX,EATW,CAAb;AAWD,CAfD;;AAiBA,eAAe,IAAf","file":"array-uniq-x.esm.js","sourcesContent":["import reduce from 'array-reduce-x';\nimport indexOf from 'index-of-x';\nimport toBoolean from 'to-boolean-x';\nimport methodize from 'simple-methodize-x';\n\nconst push = methodize([].push);\n\n/**\n * Creates a duplicate-free version of an array, using SameValueZero for equality comparisons,\n * in which only the first occurrence of each element is kept. The order of result values is\n * determined by the order they occur in the array.\n *\n * @param {Array} array - The array to inspect.\n * @param {boolean} [useSameValue] - If true the use SameValue instead of SameValueZero.\n * @returns {*} Returns the new duplicate free array.\n */\nconst uniq = function uniq(array, useSameValue) {\n  const isSameValue = toBoolean(useSameValue);\n  const type = isSameValue ? 'SameValue' : 'SameValueZero';\n\n  return reduce(\n    array,\n    function iteratee(accumulator, currentValue) {\n      if (indexOf(accumulator, currentValue, type) === -1) {\n        push(accumulator, isSameValue === false && currentValue === 0 ? 0 : currentValue);\n      }\n\n      return accumulator;\n    },\n    [],\n  );\n};\n\nexport default uniq;\n"]}